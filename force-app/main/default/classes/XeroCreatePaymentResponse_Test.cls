//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//

@IsTest
public class XeroCreatePaymentResponse_Test {
	
	// This test method should give 100% coverage
	static testMethod void testParse() {
		String json = '{'+
		'  \"Id\": \"8313a617-147d-4030-8c55-0fb931637593\",'+
		'  \"Status\": \"OK\",'+
		'  \"ProviderName\": \"Test App\",'+
		'  \"DateTimeUTC\": \"\\/Date(1525689307342)\\/\",'+
		'  \"Payments\": ['+
		'    {'+
		'      \"PaymentID\": \"3898419e-7b85-40b6-8580-c8a24fc67682\",'+
		'      \"Date\": \"\\/Date(1525651200000+0000)\\/\",'+
		'      \"BankAmount\": 20000.00,'+
		'      \"Amount\": 20000.00,'+
		'      \"CurrencyRate\": 1.000000,'+
		'      \"PaymentType\": \"ACCRECPAYMENT\",'+
		'      \"Status\": \"AUTHORISED\",'+
		'      \"UpdatedDateUTC\": \"\\/Date(1525689307077+0000)\\/\",'+
		'      \"HasAccount\": true,'+
		'      \"IsReconciled\": false,'+
		'      \"Account\": {'+
		'        \"AccountID\": \"62f40f1b-cec5-426e-9331-bae598b995c5\",'+
		'        \"Code\": \"200\",'+
		'        \"Name\": \"Sales\"'+
		'      },'+
		'      \"Invoice\": {'+
		'        \"Type\": \"ACCREC\",'+
		'        \"InvoiceID\": \"34aea763-716d-4437-a11d-45e0726419a6\",'+
		'        \"InvoiceNumber\": \"INV-0059\",'+
		'        \"Reference\": \"\",'+
		'        \"Prepayments\": [],'+
		'        \"Overpayments\": [],'+
		'        \"AmountDue\": 0.00,'+
		'        \"AmountPaid\": 20000.00,'+
		'        \"SentToContact\": false,'+
		'        \"CurrencyRate\": 1.000000,'+
		'        \"HasErrors\": false,'+
		'        \"IsDiscounted\": false,'+
		'        \"Contact\": {'+
		'          \"ContactID\": \"8a9310cc-211b-45ff-8e39-bc0a0bd4a641\",'+
		'          \"Name\": \"Umang Test Company\",'+
		'          \"ContactPersons\": [],'+
		'          \"HasValidationErrors\": false'+
		'        },'+
		'        \"DateString\": \"2018-05-07T00:00:00\",'+
		'        \"Date\": \"\\/Date(1525651200000+0000)\\/\",'+
		'        \"DueDateString\": \"2018-05-21T00:00:00\",'+
		'        \"DueDate\": \"\\/Date(1526860800000+0000)\\/\",'+
		'        \"Status\": \"PAID\",'+
		'        \"LineAmountTypes\": \"Exclusive\",'+
		'        \"LineItems\": ['+
		'          {'+
		'            \"Description\": \"Description\",'+
		'            \"UnitAmount\": 20000.00,'+
		'            \"TaxType\": \"EXEMPTOUTPUT\",'+
		'            \"TaxAmount\": 0.00,'+
		'            \"LineAmount\": 20000.00,'+
		'            \"AccountCode\": \"0516\",'+
		'            \"Tracking\": [],'+
		'            \"Quantity\": 1.0000,'+
		'            \"LineItemID\": \"070b62c1-acc4-4244-ba70-3e063369a5e1\",'+
		'            \"ValidationErrors\": []'+
		'          }'+
		'        ],'+
		'        \"SubTotal\": 20000.00,'+
		'        \"TotalTax\": 0.00,'+
		'        \"Total\": 20000.00,'+
		'        \"UpdatedDateUTC\": \"\\/Date(1525689307077+0000)\\/\",'+
		'        \"CurrencyCode\": \"AUD\",'+
		'        \"FullyPaidOnDate\": \"\\/Date(1525651200000+0000)\\/\"'+
		'      },'+
		'      \"HasValidationErrors\": false'+
		'    }'+
		'  ]'+
		'}';
		XeroCreatePaymentResponse r = XeroCreatePaymentResponse.parse(json);
		System.assert(r != null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		XeroCreatePaymentResponse objXeroCreatePaymentResponse = new XeroCreatePaymentResponse(System.JSON.createParser(json));
		System.assert(objXeroCreatePaymentResponse != null);
		System.assert(objXeroCreatePaymentResponse.Id == null);
		System.assert(objXeroCreatePaymentResponse.Status == null);
		System.assert(objXeroCreatePaymentResponse.ProviderName == null);
		System.assert(objXeroCreatePaymentResponse.DateTimeUTC == null);
		System.assert(objXeroCreatePaymentResponse.Payments == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		XeroCreatePaymentResponse.Account objAccount = new XeroCreatePaymentResponse.Account(System.JSON.createParser(json));
		System.assert(objAccount != null);
		System.assert(objAccount.AccountID == null);
		System.assert(objAccount.Code == null);
		System.assert(objAccount.Name == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		XeroCreatePaymentResponse.LineItems objLineItems = new XeroCreatePaymentResponse.LineItems(System.JSON.createParser(json));
		System.assert(objLineItems != null);
		System.assert(objLineItems.Description == null);
		System.assert(objLineItems.UnitAmount == null);
		System.assert(objLineItems.TaxType == null);
		System.assert(objLineItems.TaxAmount == null);
		System.assert(objLineItems.LineAmount == null);
		System.assert(objLineItems.AccountCode == null);
		System.assert(objLineItems.Tracking == null);
		System.assert(objLineItems.Quantity == null);
		System.assert(objLineItems.LineItemID == null);
		System.assert(objLineItems.ValidationErrors == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		XeroCreatePaymentResponse.Invoice objInvoice = new XeroCreatePaymentResponse.Invoice(System.JSON.createParser(json));
		System.assert(objInvoice != null);
		System.assert(objInvoice.Type_Z == null);
		System.assert(objInvoice.InvoiceID == null);
		System.assert(objInvoice.InvoiceNumber == null);
		System.assert(objInvoice.Reference == null);
		System.assert(objInvoice.Prepayments == null);
		System.assert(objInvoice.Overpayments == null);
		System.assert(objInvoice.AmountDue == null);
		System.assert(objInvoice.AmountPaid == null);
		System.assert(objInvoice.SentToContact == null);
		System.assert(objInvoice.CurrencyRate == null);
		System.assert(objInvoice.HasErrors == null);
		System.assert(objInvoice.IsDiscounted == null);
		System.assert(objInvoice.Contact == null);
		System.assert(objInvoice.DateString == null);
		System.assert(objInvoice.Date_z == null);
		System.assert(objInvoice.DueDateString == null);
		System.assert(objInvoice.DueDate == null);
		System.assert(objInvoice.Status == null);
		System.assert(objInvoice.LineAmountTypes == null);
		System.assert(objInvoice.LineItems == null);
		System.assert(objInvoice.SubTotal == null);
		System.assert(objInvoice.TotalTax == null);
		System.assert(objInvoice.Total == null);
		System.assert(objInvoice.UpdatedDateUTC == null);
		System.assert(objInvoice.CurrencyCode == null);
		System.assert(objInvoice.FullyPaidOnDate == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		XeroCreatePaymentResponse.Prepayments objPrepayments = new XeroCreatePaymentResponse.Prepayments(System.JSON.createParser(json));
		System.assert(objPrepayments != null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		XeroCreatePaymentResponse.Payments objPayments = new XeroCreatePaymentResponse.Payments(System.JSON.createParser(json));
		System.assert(objPayments != null);
		System.assert(objPayments.PaymentID == null);
		System.assert(objPayments.Date_z == null);
		System.assert(objPayments.BankAmount == null);
		System.assert(objPayments.Amount == null);
		System.assert(objPayments.CurrencyRate == null);
		System.assert(objPayments.PaymentType == null);
		System.assert(objPayments.Status == null);
		System.assert(objPayments.UpdatedDateUTC == null);
		System.assert(objPayments.HasAccount == null);
		System.assert(objPayments.IsReconciled == null);
		System.assert(objPayments.Account == null);
		System.assert(objPayments.Invoice == null);
		System.assert(objPayments.HasValidationErrors == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		XeroCreatePaymentResponse.Contact objContact = new XeroCreatePaymentResponse.Contact(System.JSON.createParser(json));
		System.assert(objContact != null);
		System.assert(objContact.ContactID == null);
		System.assert(objContact.Name == null);
		System.assert(objContact.ContactPersons == null);
		System.assert(objContact.HasValidationErrors == null);
	}
}