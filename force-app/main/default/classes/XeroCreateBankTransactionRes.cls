//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are not valid in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.

public class XeroCreateBankTransactionRes {

	public class Addresses {
		public String AddressType {get;set;} 
		public String City {get;set;} 
		public String Region {get;set;} 
		public String PostalCode {get;set;} 
		public String Country {get;set;} 

		public Addresses(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'AddressType') {
							AddressType = parser.getText();
						} else if (text == 'City') {
							City = parser.getText();
						} else if (text == 'Region') {
							Region = parser.getText();
						} else if (text == 'PostalCode') {
							PostalCode = parser.getText();
						} else if (text == 'Country') {
							Country = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Addresses consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class ContactGroups {

		public ContactGroups(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						{
							System.debug(LoggingLevel.WARN, 'ContactGroups consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class LineItems {
		public String Description {get;set;} 
		public Double UnitAmount {get;set;} 
		public String TaxType {get;set;} 
		public Double TaxAmount {get;set;} 
		public Double LineAmount {get;set;} 
		public String AccountCode {get;set;} 
		public List<ContactGroups> Tracking {get;set;} 
		public Double Quantity {get;set;} 
		public String LineItemID {get;set;} 
		public List<ContactGroups> ValidationErrors {get;set;} 

		public LineItems(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'Description') {
							Description = parser.getText();
						} else if (text == 'UnitAmount') {
							UnitAmount = parser.getDoubleValue();
						} else if (text == 'TaxType') {
							TaxType = parser.getText();
						} else if (text == 'TaxAmount') {
							TaxAmount = parser.getDoubleValue();
						} else if (text == 'LineAmount') {
							LineAmount = parser.getDoubleValue();
						} else if (text == 'AccountCode') {
							AccountCode = parser.getText();
						} else if (text == 'Tracking') {
							Tracking = arrayOfContactGroups(parser);
						} else if (text == 'Quantity') {
							Quantity = parser.getDoubleValue();
						} else if (text == 'LineItemID') {
							LineItemID = parser.getText();
						} else if (text == 'ValidationErrors') {
							ValidationErrors = arrayOfContactGroups(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'LineItems consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class BankTransactions {
		public String BankTransactionID {get;set;} 
		public BankAccount BankAccount {get;set;} 
		public String Type_Z {get;set;} // in json: Type
		public Boolean IsReconciled {get;set;} 
		public Double CurrencyRate {get;set;} 
		public String PrepaymentID {get;set;} 
		public Contact Contact {get;set;} 
		public String DateString {get;set;} 
		public String Date_Z {get;set;} 
		public String Status {get;set;} 
		public String LineAmountTypes {get;set;} 
		public List<LineItems> LineItems {get;set;} 
		public Double SubTotal {get;set;} 
		public Double TotalTax {get;set;} 
		public Double Total {get;set;} 
		public String UpdatedDateUTC {get;set;} 
		public String CurrencyCode {get;set;} 

		public BankTransactions(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'BankTransactionID') {
							BankTransactionID = parser.getText();
						} else if (text == 'BankAccount') {
							BankAccount = new BankAccount(parser);
						} else if (text == 'Type') {
							Type_Z = parser.getText();
						} else if (text == 'IsReconciled') {
							IsReconciled = parser.getBooleanValue();
						} else if (text == 'CurrencyRate') {
							CurrencyRate = parser.getDoubleValue();
						} else if (text == 'PrepaymentID') {
							PrepaymentID = parser.getText();
						} else if (text == 'Contact') {
							Contact = new Contact(parser);
						} else if (text == 'DateString') {
							DateString = parser.getText();
						} else if (text == 'Date') {
							Date_Z = parser.getText();
						} else if (text == 'Status') {
							Status = parser.getText();
						} else if (text == 'LineAmountTypes') {
							LineAmountTypes = parser.getText();
						} else if (text == 'LineItems') {
							LineItems = arrayOfLineItems(parser);
						} else if (text == 'SubTotal') {
							SubTotal = parser.getDoubleValue();
						} else if (text == 'TotalTax') {
							TotalTax = parser.getDoubleValue();
						} else if (text == 'Total') {
							Total = parser.getDoubleValue();
						} else if (text == 'UpdatedDateUTC') {
							UpdatedDateUTC = parser.getText();
						} else if (text == 'CurrencyCode') {
							CurrencyCode = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'BankTransactions consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Phones {
		public String PhoneType {get;set;} 
		public String PhoneNumber {get;set;} 
		public String PhoneAreaCode {get;set;} 
		public String PhoneCountryCode {get;set;} 

		public Phones(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'PhoneType') {
							PhoneType = parser.getText();
						} else if (text == 'PhoneNumber') {
							PhoneNumber = parser.getText();
						} else if (text == 'PhoneAreaCode') {
							PhoneAreaCode = parser.getText();
						} else if (text == 'PhoneCountryCode') {
							PhoneCountryCode = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Phones consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public String Id {get;set;} 
	public String Status {get;set;} 
	public String ProviderName {get;set;} 
	public String DateTimeUTC {get;set;} 
	public List<BankTransactions> BankTransactions {get;set;} 

	public XeroCreateBankTransactionRes(JSONParser parser) {
		while (parser.nextToken() != System.JSONToken.END_OBJECT) {
			if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
				String text = parser.getText();
				if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
					if (text == 'Id') {
						Id = parser.getText();
					} else if (text == 'Status') {
						Status = parser.getText();
					} else if (text == 'ProviderName') {
						ProviderName = parser.getText();
					} else if (text == 'DateTimeUTC') {
						DateTimeUTC = parser.getText();
					} else if (text == 'BankTransactions') {
						BankTransactions = arrayOfBankTransactions(parser);
					} else {
						System.debug(LoggingLevel.WARN, 'XeroCreateBankTransactionRes consuming unrecognized property: '+text);
						consumeObject(parser);
					}
				}
			}
		}
	}
	
	public class BankAccount {
		public String AccountID {get;set;} 
		public String Code {get;set;} 
		public String Name {get;set;} 

		public BankAccount(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'AccountID') {
							AccountID = parser.getText();
						} else if (text == 'Code') {
							Code = parser.getText();
						} else if (text == 'Name') {
							Name = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'BankAccount consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Contact {
		public String ContactID {get;set;} 
		public String ContactNumber {get;set;} 
		public String ContactStatus {get;set;} 
		public String Name {get;set;} 
		public String EmailAddress {get;set;} 
		public String BankAccountDetails {get;set;} 
		public List<Addresses> Addresses {get;set;} 
		public List<Phones> Phones {get;set;} 
		public String UpdatedDateUTC {get;set;} 
		public List<ContactGroups> ContactGroups {get;set;} 
		public List<ContactGroups> ContactPersons {get;set;} 
		public Boolean HasValidationErrors {get;set;} 

		public Contact(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'ContactID') {
							ContactID = parser.getText();
						} else if (text == 'ContactNumber') {
							ContactNumber = parser.getText();
						} else if (text == 'ContactStatus') {
							ContactStatus = parser.getText();
						} else if (text == 'Name') {
							Name = parser.getText();
						} else if (text == 'EmailAddress') {
							EmailAddress = parser.getText();
						} else if (text == 'BankAccountDetails') {
							BankAccountDetails = parser.getText();
						} else if (text == 'Addresses') {
							Addresses = arrayOfAddresses(parser);
						} else if (text == 'Phones') {
							Phones = arrayOfPhones(parser);
						} else if (text == 'UpdatedDateUTC') {
							UpdatedDateUTC = parser.getText();
						} else if (text == 'ContactGroups') {
							ContactGroups = arrayOfContactGroups(parser);
						} else if (text == 'ContactPersons') {
							ContactPersons = arrayOfContactGroups(parser);
						} else if (text == 'HasValidationErrors') {
							HasValidationErrors = parser.getBooleanValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Contact consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	
	public static XeroCreateBankTransactionRes parse(String json) {
		System.JSONParser parser = System.JSON.createParser(json);
		return new XeroCreateBankTransactionRes(parser);
	}
	
	public static void consumeObject(System.JSONParser parser) {
		Integer depth = 0;
		do {
			System.JSONToken curr = parser.getCurrentToken();
			if (curr == System.JSONToken.START_OBJECT || 
				curr == System.JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == System.JSONToken.END_OBJECT ||
				curr == System.JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}
	



    private static List<Phones> arrayOfPhones(System.JSONParser p) {
        List<Phones> res = new List<Phones>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Phones(p));
        }
        return res;
    }






    private static List<BankTransactions> arrayOfBankTransactions(System.JSONParser p) {
        List<BankTransactions> res = new List<BankTransactions>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new BankTransactions(p));
        }
        return res;
    }


    private static List<ContactGroups> arrayOfContactGroups(System.JSONParser p) {
        List<ContactGroups> res = new List<ContactGroups>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new ContactGroups(p));
        }
        return res;
    }


    private static List<LineItems> arrayOfLineItems(System.JSONParser p) {
        List<LineItems> res = new List<LineItems>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new LineItems(p));
        }
        return res;
    }





    private static List<Addresses> arrayOfAddresses(System.JSONParser p) {
        List<Addresses> res = new List<Addresses>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Addresses(p));
        }
        return res;
    }



}