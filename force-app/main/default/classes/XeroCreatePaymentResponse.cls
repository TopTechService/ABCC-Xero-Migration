//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are not valid in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.

public class XeroCreatePaymentResponse {

	public String Id {get;set;} 
	public String Status {get;set;} 
	public String ProviderName {get;set;} 
	public String DateTimeUTC {get;set;} 
	public List<Payments> Payments {get;set;} 

	public XeroCreatePaymentResponse(JSONParser parser) {
		while (parser.nextToken() != System.JSONToken.END_OBJECT) {
			if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
				String text = parser.getText();
				if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
					if (text == 'Id') {
						Id = parser.getText();
					} else if (text == 'Status') {
						Status = parser.getText();
					} else if (text == 'ProviderName') {
						ProviderName = parser.getText();
					} else if (text == 'DateTimeUTC') {
						DateTimeUTC = parser.getText();
					} else if (text == 'Payments') {
						Payments = arrayOfPayments(parser);
					} else {
						System.debug(LoggingLevel.WARN, 'XeroCreatePaymentResponse consuming unrecognized property: '+text);
						consumeObject(parser);
					}
				}
			}
		}
	}
	
	public class Account {
		public String AccountID {get;set;} 
		public String Code {get;set;} 
		public String Name {get;set;} 

		public Account(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'AccountID') {
							AccountID = parser.getText();
						} else if (text == 'Code') {
							Code = parser.getText();
						} else if (text == 'Name') {
							Name = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Account consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class LineItems {
		public String Description {get;set;} 
		public Double UnitAmount {get;set;} 
		public String TaxType {get;set;} 
		public Double TaxAmount {get;set;} 
		public Double LineAmount {get;set;} 
		public String AccountCode {get;set;} 
		public List<Prepayments> Tracking {get;set;} 
		public Double Quantity {get;set;} 
		public String LineItemID {get;set;} 
		public List<Prepayments> ValidationErrors {get;set;} 

		public LineItems(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'Description') {
							Description = parser.getText();
						} else if (text == 'UnitAmount') {
							UnitAmount = parser.getDoubleValue();
						} else if (text == 'TaxType') {
							TaxType = parser.getText();
						} else if (text == 'TaxAmount') {
							TaxAmount = parser.getDoubleValue();
						} else if (text == 'LineAmount') {
							LineAmount = parser.getDoubleValue();
						} else if (text == 'AccountCode') {
							AccountCode = parser.getText();
						} else if (text == 'Tracking') {
							Tracking = arrayOfPrepayments(parser);
						} else if (text == 'Quantity') {
							Quantity = parser.getDoubleValue();
						} else if (text == 'LineItemID') {
							LineItemID = parser.getText();
						} else if (text == 'ValidationErrors') {
							ValidationErrors = arrayOfPrepayments(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'LineItems consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Invoice {
		public String Type_Z {get;set;} // in json: Type
		public String InvoiceID {get;set;} 
		public String InvoiceNumber {get;set;} 
		public String Reference {get;set;} 
		public List<Prepayments> Prepayments {get;set;} 
		public List<Prepayments> Overpayments {get;set;} 
		public Double AmountDue {get;set;} 
		public Double AmountPaid {get;set;} 
		public Boolean SentToContact {get;set;} 
		public Double CurrencyRate {get;set;} 
		public Boolean HasErrors {get;set;} 
		public Boolean IsDiscounted {get;set;} 
		public Contact Contact {get;set;} 
		public String DateString {get;set;} 
		public String Date_z {get;set;} 
		public String DueDateString {get;set;} 
		public String DueDate {get;set;} 
		public String Status {get;set;} 
		public String LineAmountTypes {get;set;} 
		public List<LineItems> LineItems {get;set;} 
		public Double SubTotal {get;set;} 
		public Double TotalTax {get;set;} 
		public Double Total {get;set;} 
		public String UpdatedDateUTC {get;set;} 
		public String CurrencyCode {get;set;} 
		public String FullyPaidOnDate {get;set;} 

		public Invoice(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'Type') {
							Type_Z = parser.getText();
						} else if (text == 'InvoiceID') {
							InvoiceID = parser.getText();
						} else if (text == 'InvoiceNumber') {
							InvoiceNumber = parser.getText();
						} else if (text == 'Reference') {
							Reference = parser.getText();
						} else if (text == 'Prepayments') {
							Prepayments = arrayOfPrepayments(parser);
						} else if (text == 'Overpayments') {
							Overpayments = arrayOfPrepayments(parser);
						} else if (text == 'AmountDue') {
							AmountDue = parser.getDoubleValue();
						} else if (text == 'AmountPaid') {
							AmountPaid = parser.getDoubleValue();
						} else if (text == 'SentToContact') {
							SentToContact = parser.getBooleanValue();
						} else if (text == 'CurrencyRate') {
							CurrencyRate = parser.getDoubleValue();
						} else if (text == 'HasErrors') {
							HasErrors = parser.getBooleanValue();
						} else if (text == 'IsDiscounted') {
							IsDiscounted = parser.getBooleanValue();
						} else if (text == 'Contact') {
							Contact = new Contact(parser);
						} else if (text == 'DateString') {
							DateString = parser.getText();
						} else if (text == 'Date') {
							Date_z = parser.getText();
						} else if (text == 'DueDateString') {
							DueDateString = parser.getText();
						} else if (text == 'DueDate') {
							DueDate = parser.getText();
						} else if (text == 'Status') {
							Status = parser.getText();
						} else if (text == 'LineAmountTypes') {
							LineAmountTypes = parser.getText();
						} else if (text == 'LineItems') {
							LineItems = arrayOfLineItems(parser);
						} else if (text == 'SubTotal') {
							SubTotal = parser.getDoubleValue();
						} else if (text == 'TotalTax') {
							TotalTax = parser.getDoubleValue();
						} else if (text == 'Total') {
							Total = parser.getDoubleValue();
						} else if (text == 'UpdatedDateUTC') {
							UpdatedDateUTC = parser.getText();
						} else if (text == 'CurrencyCode') {
							CurrencyCode = parser.getText();
						} else if (text == 'FullyPaidOnDate') {
							FullyPaidOnDate = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Invoice consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Prepayments {

		public Prepayments(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						{
							System.debug(LoggingLevel.WARN, 'Prepayments consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Payments {
		public String PaymentID {get;set;} 
		public String Date_z {get;set;} 
		public Double BankAmount {get;set;} 
		public Double Amount {get;set;} 
		public Double CurrencyRate {get;set;} 
		public String PaymentType {get;set;} 
		public String Status {get;set;} 
		public String UpdatedDateUTC {get;set;} 
		public Boolean HasAccount {get;set;} 
		public Boolean IsReconciled {get;set;} 
		public Account Account {get;set;} 
		public Invoice Invoice {get;set;} 
		public Boolean HasValidationErrors {get;set;} 

		public Payments(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'PaymentID') {
							PaymentID = parser.getText();
						} else if (text == 'Date') {
							Date_z = parser.getText();
						} else if (text == 'BankAmount') {
							BankAmount = parser.getDoubleValue();
						} else if (text == 'Amount') {
							Amount = parser.getDoubleValue();
						} else if (text == 'CurrencyRate') {
							CurrencyRate = parser.getDoubleValue();
						} else if (text == 'PaymentType') {
							PaymentType = parser.getText();
						} else if (text == 'Status') {
							Status = parser.getText();
						} else if (text == 'UpdatedDateUTC') {
							UpdatedDateUTC = parser.getText();
						} else if (text == 'HasAccount') {
							HasAccount = parser.getBooleanValue();
						} else if (text == 'IsReconciled') {
							IsReconciled = parser.getBooleanValue();
						} else if (text == 'Account') {
							Account = new Account(parser);
						} else if (text == 'Invoice') {
							Invoice = new Invoice(parser);
						} else if (text == 'HasValidationErrors') {
							HasValidationErrors = parser.getBooleanValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Payments consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Contact {
		public String ContactID {get;set;} 
		public String Name {get;set;} 
		public List<Prepayments> ContactPersons {get;set;} 
		public Boolean HasValidationErrors {get;set;} 

		public Contact(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'ContactID') {
							ContactID = parser.getText();
						} else if (text == 'Name') {
							Name = parser.getText();
						} else if (text == 'ContactPersons') {
							ContactPersons = arrayOfPrepayments(parser);
						} else if (text == 'HasValidationErrors') {
							HasValidationErrors = parser.getBooleanValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Contact consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	
	public static XeroCreatePaymentResponse parse(String json) {
		System.JSONParser parser = System.JSON.createParser(json);
		return new XeroCreatePaymentResponse(parser);
	}
	
	public static void consumeObject(System.JSONParser parser) {
		Integer depth = 0;
		do {
			System.JSONToken curr = parser.getCurrentToken();
			if (curr == System.JSONToken.START_OBJECT || 
				curr == System.JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == System.JSONToken.END_OBJECT ||
				curr == System.JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}
	


    private static List<LineItems> arrayOfLineItems(System.JSONParser p) {
        List<LineItems> res = new List<LineItems>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new LineItems(p));
        }
        return res;
    }








    private static List<Prepayments> arrayOfPrepayments(System.JSONParser p) {
        List<Prepayments> res = new List<Prepayments>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Prepayments(p));
        }
        return res;
    }


    private static List<Payments> arrayOfPayments(System.JSONParser p) {
        List<Payments> res = new List<Payments>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Payments(p));
        }
        return res;
    }




}